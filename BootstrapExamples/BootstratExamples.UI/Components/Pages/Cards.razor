@page "/cards"
@rendermode InteractiveServer
@using System.Text.RegularExpressions;

<PageTitle>Cards</PageTitle>

@* <div class="d-grid text-center">
@foreach (var card in GetCards())
{
<div class="g-col-3">
<img src="@card.ImageUrl" class="img-thumbnail" />
<span>@card.Title;</span>
<span>@card.Description;</span>
</div>
}
</div> *@
<div class="card" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">Card title</h5>
        <h6 class="card-subtitle mb-2 text-body-secondary">Card subtitle</h6>
        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's
            content.</p>
        <a href="#" class="card-link">Card link</a>
        <a href="#" class="card-link">Another link</a>
    </div>
</div>

<div class="card" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">Card title</h5>
        <h6 class="card-subtitle mb-2 text-body-secondary">Card subtitle</h6>
        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's
            content.</p>
        <div class="d-flex">
            @foreach (var ch in InputValue.PadRight(3, ' '))
            {
                <div class="border border-1 rounded me-2  d-flex align-items-center justify-content-center" style="width: 20px; height: 20px; text-align: center;">@ch</div>
            }
        </div>

        <input type="text" pattern="^[a-zA-Z]+$" @bind="InputValue" @bind:event="oninput" />
    </div>
</div>

@code {

    private string _inputValue = string.Empty;
    private string InputValue
    {
        get
        {
            return _inputValue;
        }
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                _inputValue = string.Empty;
            }
            else if (Regex.IsMatch(value, "^[a-zA-Z]+$"))
            {
                _inputValue = value;
            }
        }
    }

    private record Card(int Id, string Title, string Description, string ImageUrl);

    private Card[] GetCards()
    {
        return new Card[]
        {
new Card(1, "Card 1", "Description 1", "https://placehold.co/600x400"),
new Card(2, "Card 2", "Description 2", "https://placehold.co/600x400"),
new Card(3, "Card 3", "Description 3", "https://placehold.co/600x400"),
new Card(4, "Card 4", "Description 4", "https://placehold.co/600x400"),
new Card(5, "Card 5", "Description 5", "https://placehold.co/600x400"),
new Card(6, "Card 6", "Description 6", "https://placehold.co/600x400"),
new Card(7, "Card 7", "Description 7", "https://placehold.co/600x400"),
new Card(8, "Card 8", "Description 8", "https://placehold.co/600x400"),
new Card(9, "Card 9", "Description 9", "https://placehold.co/600x400"),
new Card(10, "Card 10", "Description 10", "https://placehold.co/600x400"),
new Card(11, "Card 11", "Description 11", "https://placehold.co/600x400"),
new Card(12, "Card 12", "Description 12", "https://placehold.co/600x400"),
new Card(13, "Card 13", "Description 13", "https://placehold.co/600x400"),
new Card(14, "Card 14", "Description 14", "https://placehold.co/600x400"),
new Card(15, "Card 15", "Description 15", "https://placehold.co/600x400"),
new Card(16, "Card 16", "Description 16", "https://placehold.co/600x400"),
new Card(17, "Card 17", "Description 17", "https://placehold.co/600x400"),
new Card(18, "Card 18", "Description 18", "https://placehold.co/600x400"),
new Card(19, "Card 19", "Description 19", "https://placehold.co/600x400"),
new Card(20, "Card 20", "Description 20", "https://placehold.co/600x400"),
        };
    }
}