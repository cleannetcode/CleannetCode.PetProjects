@page "/words/guess"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@if (Finished)
{
    <form action="/words" method="get">
        <div class="d-flex flex-column justify-content-center align-items-center" style="height: 80vh;">
            <div class="align-self-center">
                <span>The word is <b>@Answer</b></span>
                @if (Result)
                {
                    <span class="bi bi-check-circle mb-5" style="color: green;"></span>
                }
                else
                {
                    <span class="bi bi-x-circle mb-5" style="color: red;"></span>
                }
                <button @ref="BackButton" class="btn btn-primary">Back</button>
            </div>
        </div>
    </form>
}
else
{
    <form @onsubmit=Enter @onsubmit:preventDefault=true @onsubmit:stopPropagation=true>
        <div class="d-flex flex-column justify-content-center align-items-center" style="height: 80vh;">

            @if (@Word is { })
            {
                <div class="d-flex flex-column align-items-center mb-5">
                    <img src="@Word.ImageUrl" class="rounded object-fit-cover w-100 mb-3" width="600" height="400" />
                    <p>@Word.Description</p>
                </div>

                <Card CssClass="mb-3" Answer="@Answer" OnValueChange="(v) => Value = v" @rendermode="InteractiveServer" />

                @if (Value.Length == Answer.Length)
                {
                    <button class="btn btn-primary">
                        Enter
                    </button>
                }
                else
                {
                    <button class="btn btn-primary" disabled>
                        Enter
                    </button>
                }
            }

        </div>
    </form>
}



@code {
    private string Answer { get; set; } = "";
    private WordItem? Word { get; set; }
    private string Value { get; set; } = string.Empty;
    private bool Result => Value.ToLower() == Answer.ToLower();
    private bool Finished = false;
    private ElementReference BackButton { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Word = GetRandomWord();
            Answer = Word.Word;
            StateHasChanged();
        }

        if (Finished)
        {
            await BackButton.FocusAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Enter()
    {
        Finished = true;
    }

    private WordItem GetRandomWord()
    {
        var words = new[] {
new WordItem("Apple", "A fruit",
"https://images.pexels.com/photos/102104/pexels-photo-102104.jpeg?auto=compress&cs=tinysrgb&w=600&h=400&dpr=2"),
new WordItem("Banana", "A fruit",
"https://images.pexels.com/photos/2872755/pexels-photo-2872755.jpeg?auto=compress&cs=tinysrgb&w=600&h=400&dpr=2"),
new WordItem("Pen", "A tool",
"https://images.pexels.com/photos/983826/pexels-photo-983826.jpeg?auto=compress&cs=tinysrgb&w=600&h=400&dpr=2kj"),
};
        var random = new Random();
        var index = random.Next(words.Length);
        return words[index];
    }

    private record WordItem(string Word, string? Description, string ImageUrl);
}