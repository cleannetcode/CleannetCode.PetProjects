<div class="d-flex flex-row @CssClass">
    @if (Answer is { Length: > 0 } && ElementReferences.Length == Answer.Length)
    {
        @for (var i = 0; i < Answer.Length; i++)
        {
            var index = i;
            <input @ref="ElementReferences[index]" class="form-control" style="width: 45px; text-align: center;" type="text"
                maxlength="1" @bind="Characters[index]" @onkeydown="(e) => OnKeydown(e, index)"
                @oninput="(e) => OnInputNext(e, index)" />
        }
    }
</div>

@code {
    [Parameter]
    public string Answer { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> OnValueChange { get; set; }
    [Parameter]
    public string CssClass { get; set; } = "";

    private string[] Characters { get; set; } = Array.Empty<string>();
    private string Result => string.Join("", Characters);

    private ElementReference[] ElementReferences { get; set; } = Array.Empty<ElementReference>();
    private string _value = string.Empty;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Answer is { Length: > 0 })
        {
            ElementReferences = new ElementReference[Answer.Length];
            Characters = new string[Answer.Length];
            StateHasChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnKeydown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Backspace")
        {
            if (index > 0)
            {
                Characters[index] = string.Empty;
                await ElementReferences[index - 1].FocusAsync();
            }
        }

        if (e.Key.Length == 1)
        {
            Characters[index] = e.Key;
            if (index < ElementReferences.Length - 1)
            {
                await ElementReferences[index + 1].FocusAsync();
            }
        }

        if (OnValueChange.HasDelegate)
        {
            @* await OnValueChange.InvokeAsync(string.Join("", Characters)); *@
            await OnValueChange.InvokeAsync(Result);
        }
    }

    private async Task OnInputNext(ChangeEventArgs e, int index)
    {
        if (e.Value is string { Length: > 0 } && index < ElementReferences.Length - 1)
        {
            await ElementReferences[index + 1].FocusAsync();
        }

        if (OnValueChange.HasDelegate)
        {
            Console.WriteLine(string.Join("", Characters));
            @* await OnValueChange.InvokeAsync(string.Join("", Characters)); *@
            await OnValueChange.InvokeAsync(Result);
        }
    }
}